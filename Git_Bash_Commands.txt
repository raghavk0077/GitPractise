Git bash Commands

1- git status
.
.
.
.
.
...
8-  git add --a
it will make all the files in staging area

9-  git commit -m "Any message you can type regarding commit"
this will commit all the changes with your message

10- rm -rf .git
it deletes the git folder from your directory your directory will no longer be initialized with git

11- git clone anyUrl
it will clone the repository to your directory

12- touch .gitignore
it will create one file with name gitignore here we can give the name of files that we don't want to be on staging area or tracking area we can give directory name too which we don't want to track

13- git diff
it will compare working area with staging area

14- git diff --staged
it will compare your staging area with the last commit made

15- git commit -a -m "Any comment"
it will directly commit the files that are unmodified but untracked files will remain as such there will be no change on untracked files rest files that are unmodified will skip the staging area

16- git rm filename.ext
you can directly remove your file from git bash and it will automatically put it in staging area too

17- git mv filename renamed_filename
it will change the name of filename and automatically put it in staging area where directly commit can be made

18- git rm --cached filename.ext
it will not remove the file else it will stop git from tracking those file

19- git log -p
it will give all the information about commits that has been made in the git repository

20- git log -p -n
(here n is any number of commits till you want to see)

21- git log --stat
here you can see all the changes made in the repository after each commit at a glance 

22- git log --pretty=(oneline/short/full)
oneline will give you all commits in one line without any information
short will give you all commits made with author name
full will give you author name and commit name

23- git log --since=n.days/weeks/months/years
where n is any number
this will filter your log according to condition

24- git restore --staged filename.ext
it will remove your file from staging area

25- git checkout -- filename.ext
it will make your file same as your last commit(it will remove new modifications made by you in file) if it is not staged
To make File restore/unmodify to previous commit

26- git checkout -f
it will make your directly look like when it was during last commit
To make all Files restore/unmodify to previous commit

27- git config --global alias.anyName 'any command you want to give alias'
example => git config --global alias.st status
git st AND git status ---- both will work same

28- git checkout -b <new-branch-name>
To create new branch

29- git checkout <branch-name>
To switch into different branch

30- git branch
To check all the branches in repository

31- git merge <branch name to be merge>
To merge branch , switch to parent branch

32- To check all branches with their last commit hash code and message
$ git branch -v

33- To check which branch are merged
$ git branch --merged

34- To check which branch are not merged
$ git branch --no-merged

35- To delete branch
$ git branch -d <branch-name>  

36- TO delete unmerged branch
$ git branch -D <branch-name>


















